#
# drop down to just the main variables for the demo#
figDat <- subset(figDat, select=c(e_centre_behr, n_centre_behr, Rich, MeanAET, MeanElev, MeanAnnTemp))#
figDat <- figDat[complete.cases(figDat),]#
#
# convert to a spatial pixel data frame#
coordinates(figDat) <-  ~ e_centre_behr + n_centre_behr#
gridded(figDat) <- TRUE
setwd('/Users/dorme/Talks & Teaching/SpatialMethods')
cellData <- read.table("/Users/dorme/Work/ADHoC/ADHoC_Database/Behr_GridTable.txt")[,c(1,4,5)]#
names(cellData) <- c('gridid', 'e_centre_behr', 'n_centre_behr')#
#
# trim off minor diffs in coords#
cellData$e_centre_behr <- round(cellData$e_centre_behr / 1000, 0)#
cellData$n_centre_behr <- round(cellData$n_centre_behr / 1000, 0)#
#
# get the data and add in the behr coords#
figDat <- read.table('/Users/dorme/Work/Students/Lynsey_McInnes/MSc_AfricaData/ImpermeabilityMS/Figures/ImpermDataFuller.txt')#
figDat <- merge(cellData, figDat)#
#
# drop some fringing space#
figDat <- subset(figDat, e_centre_behr > -1.9e3 & n_centre_behr < 3e3) #
#
# drop down to just the main variables for the demo#
figDat <- subset(figDat, select=c(e_centre_behr, n_centre_behr, Rich, MeanAET, MeanElev, MeanAnnTemp))#
figDat <- figDat[complete.cases(figDat),]#
#
# convert to a spatial pixel data frame#
coordinates(figDat) <-  ~ e_centre_behr + n_centre_behr#
gridded(figDat) <- TRUE
str(figDat)
setwd('/Users/dorme/Talks & Teaching/SpatialMethods')
cellData <- read.table("/Users/dorme/Work/ADHoC/ADHoC_Database/Behr_GridTable.txt")[,c(1,4,5)]#
names(cellData) <- c('gridid', 'e_centre_behr', 'n_centre_behr')#
#
# trim off minor diffs in coords#
cellData$e_centre_behr <- round(cellData$e_centre_behr / 1000, 3)#
cellData$n_centre_behr <- round(cellData$n_centre_behr / 1000, 3)
diff(unique(cellData$e_centre_behr))
cellData <- read.table("/Users/dorme/Work/ADHoC/ADHoC_Database/Behr_GridTable.txt")[,c(1,4,5)]#
names(cellData) <- c('gridid', 'e_centre_behr', 'n_centre_behr')#
#
# trim off minor diffs in coords#
cellData$e_centre_behr <- round(cellData$e_centre_behr / 1000, 1)#
cellData$n_centre_behr <- round(cellData$n_centre_behr / 1000, 3)
diff(unique(cellData$e_centre_behr))
cellData <- read.table("/Users/dorme/Work/ADHoC/ADHoC_Database/Behr_GridTable.txt")[,c(1,4,5)]#
names(cellData) <- c('gridid', 'e_centre_behr', 'n_centre_behr')#
#
# trim off minor diffs in coords#
cellData$e_centre_behr <- round(cellData$e_centre_behr / 1000, 3)#
cellData$n_centre_behr <- round(cellData$n_centre_behr / 1000, 3)
table(unique(cellData$e_centre_behr))
table(diff(unique(cellData$e_centre_behr)))
setwd('/Users/dorme/Talks & Teaching/SpatialMethods')
cellData <- read.table("/Users/dorme/Work/ADHoC/ADHoC_Database/Behr_GridTable.txt")[,c(1,4,5)]#
names(cellData) <- c('gridid', 'e_centre_behr', 'n_centre_behr')
table(diff(unique(cellData$e_centre_behr)))
table(round(diff(unique(cellData$e_centre_behr)),2))
table(ceiling(diff(unique(cellData$e_centre_behr)),2))
table(ceiling(diff(unique(cellData$e_centre_behr))))
table(ceiling(diff(unique(cellData$e_centre_behr)),1))
table(round(diff(unique(cellData$e_centre_behr)),1))
table(round(diff(unique(cellData$n_centre_behr)),1))
setwd('/Users/dorme/Talks & Teaching/SpatialMethods')
cellData$e_centre_behr <- round(cellData$e_centre_behr, 1) / 1000#
cellData$n_centre_behr <- round(cellData$n_centre_behr, 1) / 1000#
#
# get the data and add in the behr coords#
figDat <- read.table('/Users/dorme/Work/Students/Lynsey_McInnes/MSc_AfricaData/ImpermeabilityMS/Figures/ImpermDataFuller.txt')#
figDat <- merge(cellData, figDat)#
#
# drop some fringing space#
figDat <- subset(figDat, e_centre_behr > -1.9e3 & n_centre_behr < 3e3) #
#
# drop down to just the main variables for the demo#
figDat <- subset(figDat, select=c(e_centre_behr, n_centre_behr, Rich, MeanAET, MeanElev, MeanAnnTemp))#
figDat <- figDat[complete.cases(figDat),]#
#
# convert to a spatial pixel data frame#
coordinates(figDat) <-  ~ e_centre_behr + n_centre_behr#
gridded(figDat) <- TRUE
diff(unique(figDat$e_centre_behr)))
diff(unique(figDat$e_centre_behr))
setwd('/Users/dorme/Talks & Teaching/SpatialMethods')
cellData <- read.table("/Users/dorme/Work/ADHoC/ADHoC_Database/Behr_GridTable.txt")[,c(1,4,5)]#
names(cellData) <- c('gridid', 'e_centre_behr', 'n_centre_behr')#
#
# trim off minor diffs in coords#
cellData$e_centre_behr <- round(cellData$e_centre_behr, 1) / 1000#
cellData$n_centre_behr <- round(cellData$n_centre_behr, 1) / 1000
diff(unique(cellData$e_centre_behr))
table(diff(unique(cellData$e_centre_behr)))
str(cellData)
setwd('/Users/dorme/Talks & Teaching/SpatialMethods')
cellData <- read.table("/Users/dorme/Work/ADHoC/ADHoC_Database/Behr_GridTable.txt")[,c(1,4,5)]#
names(cellData) <- c('gridid', 'e_centre_behr', 'n_centre_behr')
table(diff(unique(cellData$e_centre_behr)))
diff(unique(round(cellData$e_centre_behr, 1)))
table(round(cellData$e_centre_behr, 1))
cellData <- read.table("/Users/dorme/Work/ADHoC/ADHoC_Database/Behr_GridTable.txt")[,c(1,4,5)]#
names(cellData) <- c('gridid', 'e_centre_behr', 'n_centre_behr')
cellData$e_centre_behr[1:10]
print(cellData$e_centre_behr[1:10], width=20)
print(cellData$e_centre_behr[1:10], digits=20)
print(cellData$e_centre_behr[1:10], digits=200)
print(cellData$e_centre_behr[1:10], digits=30)
print(cellData$e_centre_behr[1:10], digits=24)
print(cellData$e_centre_behr[1:10], digits=20)
plot(n_centre_behr ~ e_centre_behr, data=cellData)
setwd('/Users/dorme/Talks & Teaching/SpatialMethods')
# get the data and add in the behr coords#
figDat <- read.table('/Users/dorme/Work/Students/Lynsey_McInnes/MSc_AfricaData/ImpermeabilityMS/Figures/ImpermDataFuller.txt')#
figDat <- merge(cellData, figDat)
str(figDat)
setwd('/Users/dorme/Talks & Teaching/SpatialMethods')
#
grid.id <- as.vector(mapply(function(x){1:360 + x*360}, 151:0, SIMPLIFY=T))#
#
col <- rep(1:360, times=152)#
row <- rep(152:1, each=360)#
#
cellsize <- 96486.268#
e_centre_behr <- rep(seq(cellsize * -179.5, cellsize * 179.5, cellsize), times=152)#
n_centre_behr <- rep(seq(cellsize * 75.5, cellsize * -75.5, -cellsize), each=360)#
#
cellData <- data.frame(gridid, e_centre_behr, n_centre_behr)
setwd('/Users/dorme/Talks & Teaching/SpatialMethods')
gridid <- as.vector(mapply(function(x){1:360 + x*360}, 151:0, SIMPLIFY=T))#
#
col <- rep(1:360, times=152)#
row <- rep(152:1, each=360)#
#
cellsize <- 96486.268#
e_centre_behr <- rep(seq(cellsize * -179.5, cellsize * 179.5, cellsize), times=152)#
n_centre_behr <- rep(seq(cellsize * 75.5, cellsize * -75.5, -cellsize), each=360)#
#
cellData <- data.frame(gridid, e_centre_behr, n_centre_behr)
setwd('/Users/dorme/Talks & Teaching/SpatialMethods')
# get the data and add in the behr coords#
figDat <- read.table('/Users/dorme/Work/Students/Lynsey_McInnes/MSc_AfricaData/ImpermeabilityMS/Figures/ImpermDataFuller.txt')#
figDat <- merge(cellData, figDat)
setwd('/Users/dorme/Talks & Teaching/SpatialMethods')
#
#
# drop some fringing space#
figDat <- subset(figDat, e_centre_behr > -1.9e3 & n_centre_behr < 3e3) #
#
# drop down to just the main variables for the demo#
figDat <- subset(figDat, select=c(e_centre_behr, n_centre_behr, Rich, MeanAET, MeanElev, MeanAnnTemp))#
figDat <- figDat[complete.cases(figDat),]
#
#
#
coordinates(figDat) <-  ~ e_centre_behr + n_centre_behr#
gridded(figDat) <- TRUE
setwd('/Users/dorme/Talks & Teaching/SpatialMethods')
variogram(Rich ~ 1, data=figDat, width=100)
summary(figDat)
variogram
methods(variogram)
gstat:::variogram.formula
?gstat
gstat:::variogram.gstat
gstat:::variogram.default
variogram(Rich ~ 1, data=figDat, width=100, map=TRUE)
?variogram
variogram(Rich ~ 1, data=figDat, width=100, map=TRUE, cutoff=2000)
debug(gstat)
variogram(Rich ~ 1, data=figDat, width=100)
tmp <-    variogram(Rich ~ 1, data=figDat, width=100)
c
str(tmp)
plot(tmp)
plot(tmp)
dev.off()
dev.off()
dev.off()
plot(tmp)
debug(print.gstat)
debug(gstat:::print.gstat)
tmp <-    variogram(Rich ~ 1, data=figDat, width=100)
tmp <-    variogram(Rich ~ 1, data=figDat, width=100)
str(g)
debug(variogram)
variogram
variogram
work you absolute cunt
the cells are fucking square you shit
variogram.gstat
debug(variogram.gstat)
debug(gstat::variogram.gstat)
debug(gstat:::variogram.gstat)
tmp <-    variogram(Rich ~ 1, data=figDat, width=100)
i
methods(variogram)
debug(gstat:::variogram.default)
tmp <-    variogram(Rich ~ 1, data=figDat, width=100)
c
traceback()
?variogram
setwd('/Users/dorme/Talks & Teaching/SpatialMethods')
variogram(figDat$Rich, coordinates(figDat), width=100)
c
c
?variogram
setwd('/Users/dorme/Talks & Teaching/SpatialMethods')
variogram(list(figDat$Rich), list(coordinates(figDat)), width=100)
c
c
?variogram
setwd('/Users/dorme/Talks & Teaching/SpatialMethods')
richCorrel <- variogram(list(figDat$Rich), list(coordinates(figDat)), width=100)
c
c
richVariog
richVariog <- variogram(list(figDat$Rich), list(coordinates(figDat)), width=100)
c
c
undebug()
undebug(variogram.default)
undebug(gstat:::variogram.default)
richVariog <- variogram(list(figDat$Rich), list(coordinates(figDat)), width=100)
c
undebug(gstat:::variogram)
richVariog <- variogram(list(figDat$Rich), list(coordinates(figDat)), width=100)
plot(richVariog)
richVariog <- variogram(list(figDat$Rich), list(coordinates(figDat)), width=10000)
plot(richVariog)
?variogram
setwd('/Users/dorme/Talks & Teaching/SpatialMethods')
gridid <- as.vector(mapply(function(x){1:360 + x*360}, 151:0, SIMPLIFY=T))#
#
col <- rep(1:360, times=152)#
row <- rep(152:1, each=360)#
#
cellsize <- 96.486268#
e_centre_behr <- rep(seq(cellsize * -179.5, cellsize * 179.5, cellsize), times=152)#
n_centre_behr <- rep(seq(cellsize * 75.5, cellsize * -75.5, -cellsize), each=360)#
#
cellData <- data.frame(gridid, e_centre_behr, n_centre_behr)#
#
# get the data and add in the behr coords#
figDat <- read.table('/Users/dorme/Work/Students/Lynsey_McInnes/MSc_AfricaData/ImpermeabilityMS/Figures/ImpermDataFuller.txt')#
figDat <- merge(cellData, figDat)#
#
# drop some fringing space#
figDat <- subset(figDat, e_centre_behr > -1.9e3 & n_centre_behr < 3e3) #
#
# drop down to just the main variables for the demo#
figDat <- subset(figDat, select=c(e_centre_behr, n_centre_behr, Rich, MeanAET, MeanElev, MeanAnnTemp))#
figDat <- figDat[complete.cases(figDat),]#
#
# convert to a spatial pixel data frame#
# figCoords <- SpatialPoints(figDat[, c("e_centre_behr", "n_centre_behr")])#
# figDat <- SpatialPixelsDataFrame(figCoords, data=figDat, tolerance=0.01)#
#
coordinates(figDat) <-  ~ e_centre_behr + n_centre_behr#
gridded(figDat) <- TRUE
setwd('/Users/dorme/Talks & Teaching/SpatialMethods')
spplot(figDat, 'Rich', col.regions=heat.colors(20), scales=list(draw=TRUE), par.settings=theme.loPadding)
setwd('/Users/dorme/Talks & Teaching/SpatialMethods')
richVariog <- variogram(list(figDat$Rich), list(coordinates(figDat)), width=100)
str(richVariog)
plot(richVariog)
richVariog <- variogram(list(figDat$Rich), list(coordinates(figDat)), width=100, cutoff=10000)
plot(richVariog)
sum(richVariog$np)
?lisa
?lisa
setwd('/Users/dorme/Talks & Teaching/SpatialMethods')
richLisa <- with(figDat@data, lisa(e_centre_behr, n_centre_behr, Rich, neigh=8, resamp=0))
richLisa <- with(figDat@data, lisa(e_centre_behr, n_centre_behr, Rich, neigh=8, resamp=0))
debug(lisa)
richLisa <- with(figDat@data, lisa(e_centre_behr, n_centre_behr, Rich, neigh=8, resamp=0))
str(x)
str(figDat)
setwd('/Users/dorme/Talks & Teaching/SpatialMethods')
richLisa <- lisa(figCoords[,1], figCoords[,2], figDat$Rich, neigh=8, resamp=0)
Q
undebug(lisa)
richLisa <- lisa(figCoords[,1], figCoords[,2], figDat$Rich, neigh=8, resamp=0)
figCoords
str(figCoords)
setwd('/Users/dorme/Talks & Teaching/SpatialMethods')
figCoords <- coordinates(figDat)@coords#
richLisa <- lisa(figCoords[,1], figCoords[,2], figDat$Rich, neigh=8, resamp=0)
str(figCoords)
figCoords <- coordinates(figDat)
str(figCoords)
setwd('/Users/dorme/Talks & Teaching/SpatialMethods')
figCoords <- coordinates(figDat)#
richLisa <- lisa(figCoords[,1], figCoords[,2], figDat$Rich, neigh=8, resamp=0)
plot(richLisa)
str(richLisa)
figCoords <- coordinates(figDat)#
richLisa <- lisa(figCoords[,1], figCoords[,2], figDat$Rich, neigh=8, resamp=1)
str(richLisa)
summary(richLisa)
summary(richLisa$dmean)
figCoords <- coordinates(figDat)#
richLisa <- lisa(figCoords[,1], figCoords[,2], figDat$Rich, neigh=8, resamp=10)
str(richLisa)
str(richLisa$n)
summary(richLisa$n)
?lisa
#first generate some sample data#
x <- expand.grid(1:20, 1:5)[,1]#
y <- expand.grid(1:20, 1:5)[,2]#
#
#z data from an exponential random field#
z <- rmvn.spa(x=x, y=y, p=2, method="exp")
z
fit1 <- lisa(x=x, y=y, z=z, neigh=3, resamp=100)
plot(fit1)
x
y
z
?plot.lisa
suppressPackageStartupMessages(library(sp))
suppressPackageStartupMessages(library(spdep))
suppressPackageStartupMessages(library(spatialreg))
suppressPackageStartupMessages(library(mgcv)) # for GAM
suppressPackageStartupMessages(library(ncf)) # for correlog
suppressPackageStartupMessages(library(gstat)) # for variogram
suppressPackageStartupMessages(library(nlme)) # for gls
suppressPackageStartupMessages(library(spgwr)) # for gwr
suppressPackageStartupMessages(library(knitr)) # for kable
suppressPackageStartupMessages(library(sjPlot)) # for tab_model display
suppressPackageStartupMessages(library(stargazer)) # for tab_model display
suppressPackageStartupMessages(library(SpatialPack)) # for clifford t test
suppressPackageStartupMessages(library(hexbin))
suppressPackageStartupMessages(library(lattice))
load('../../data/spatial_models/SpatialDataExample.rda')
# getting a theme with less padding at the sides
theme.loPadding <-
list(layout.heights = list(top.padding = 0.5, main.key.padding = 0.5,
key.axis.padding = 0.5, axis.xlab.padding = 0.5, xlab.key.padding = 0.5,
key.sub.padding = 0.5, bottom.padding = 0.3),
layout.widths = list(left.padding = 0.5, key.ylab.padding = 0.5,
ylab.axis.padding = 0.5, axis.key.padding = 0.5, right.padding = 0.5),
lwd=2, cex=2)
brpal <- hcl.colors(20, 'Blue-Red')
spplot(figDat, 'Rich', col.regions=brpal, scales=list(cex=1, draw=TRUE),
par.settings=theme.loPadding)
panelFun <- function(x,y,...){
panel.xyplot(x,y,...)
panel.loess(x,y,col.line='black',...)
}
print(spplot(figDat, 'MeanAET', col.regions=brpal,
main='Actual Evapotranspiration (AET)',  par.settings=theme.loPadding),
split=c(1,1,3,2), more=TRUE)
print(xyplot(Rich ~ MeanAET, data=figDat@data,
panel= panelFun,  par.settings=theme.loPadding),
split=c(1,2,3,2), more=TRUE)
print(spplot(figDat, 'MeanAnnTemp', col.regions=brpal,
main='Mean Annual Temperature',  par.settings=theme.loPadding),
split=c(2,1,3,2), more=TRUE)
print(xyplot(Rich ~ MeanAnnTemp, data=figDat@data,
panel= panelFun,  par.settings=theme.loPadding),
split=c(2,2,3,2), more=TRUE)
print(spplot(figDat, 'MeanElev', col.regions=brpal,
main='Mean Elevation',  par.settings=theme.loPadding),
split=c(3,1,3,2), more=TRUE)
print(xyplot(Rich ~ MeanElev, data=figDat@data,
panel= panelFun,  par.settings=theme.loPadding),
split=c(3,2,3,2))
simpleLM <- lm(Rich ~ MeanAET + MeanAnnTemp + MeanElev, data=figDat)
cf <- data.frame(coef(summary(simpleLM)))
colnames(cf) <- c('Est','SE','t', 'p')
cf$p <- ifelse(cf$p >= 0.001, cf$p, '< 0.001')
print(kable(cf, digits=2))
simpleGAM <- gam(Rich ~ s(MeanAET) + s(MeanAnnTemp) + s(MeanElev), data=figDat)
par(mfrow=c(1,3), mar=c(3,3,1,1), mgp=c(2,0.8,0))
plot(simpleGAM)
# kable(summary(simpleGAM)$s.table)
figDat$simpleLM.pred <- predict(simpleLM)
figDat$simpleGAM.pred <- predict(simpleGAM)
atRich <- seq(0,700, length=21)
print(spplot(figDat, 'simpleLM.pred', col.regions=brpal, at=atRich,
main='Linear Model (r2 = 0.45)',  par.settings=theme.loPadding),
split=c(1,1,3,1), more=TRUE)
print(spplot(figDat, 'Rich', col.regions=brpal, at=atRich,
main='Observed richness',  par.settings=theme.loPadding),
split=c(2,1,3,1), more=TRUE)
print(spplot(figDat, 'simpleGAM.pred', col.regions=brpal,
at=atRich, main='GAM (r2 = 0.57)',  par.settings=theme.loPadding),
split=c(3,1,3,1))
# Setup for the next few slides
n <- 6
box <- st_polygon(list(matrix(c(0,0,0,n,n,n,n,0,0,0), byrow=TRUE, ncol=2)))
box_cells <- st_make_grid(box, cellsize=1, what='centers')
box_cells_sp <- as(box_cells, 'Spatial')
# Rook and Queen
rook <- cell2nb(n,n)
queen <- cell2nb(n,n, 'queen')
knn <- knearneigh(box_cells_sp, k=8)
dnn <- dnearneigh(box_cells_sp, 0, 2.4)
nb_plotter <- function(nb1_idx, nb2_idx, pts=c(1,19), cex=3){
plot(box_cells, type='n')
# Draw lines connecting points 1 and 2 to neighbours
nb1 <-  box_cells[nb1_idx,]
nb2 <-  box_cells[nb2_idx,]
pt1 <- box_cells[pts[1],]
pt2 <- box_cells[pts[2],]
for(row in nb1){
lines(rbind(st_coordinates(pt1), st_coordinates(row)))
}
for(row in nb2){
lines(rbind(st_coordinates(pt2), st_coordinates(row)))
}
plot(box_cells, add=TRUE, cex=cex, lwd=3)
plot(box_cells[pts,], add=TRUE, col='red', pch=20, cex=cex)
plot(nb1, add=TRUE, col='darkgreen', pch=20, cex=cex)
plot(nb2, add=TRUE, col='darkgreen', pch=20, cex=cex)
}
nb_plotter(rook[[1]], rook[[29]], c(1,29))
traceback()
debug(nb_plotter)
nb_plotter(rook[[1]], rook[[29]], c(1,29))
nb_plotter(rook[[1]], rook[[29]], c(1,29))
box_cells
box_cells
# Setup for the next few slides
n <- 6
box <- st_polygon(list(matrix(c(0,0,0,n,n,n,n,0,0,0), byrow=TRUE, ncol=2)))
box_cells <- st_make_grid(box, cellsize=1, what='centers')
box_cells_sp <- as(box_cells, 'Spatial')
# Rook and Queen
rook <- cell2nb(n,n)
queen <- cell2nb(n,n, 'queen')
knn <- knearneigh(box_cells_sp, k=8)
dnn <- dnearneigh(box_cells_sp, 0, 2.4)
nb_plotter <- function(nb1_idx, nb2_idx, pts=c(1,19), cex=3){
plot(box_cells, type='n')
# Draw lines connecting points 1 and 2 to neighbours
nb1 <-  box_cells[nb1_idx]
nb2 <-  box_cells[nb2_idx]
pt1 <- box_cells[pts[1],]
pt2 <- box_cells[pts[2],]
for(row in nb1){
lines(rbind(st_coordinates(pt1), st_coordinates(row)))
}
for(row in nb2){
lines(rbind(st_coordinates(pt2), st_coordinates(row)))
}
plot(box_cells, add=TRUE, cex=cex, lwd=3)
plot(box_cells[pts,], add=TRUE, col='red', pch=20, cex=cex)
plot(nb1, add=TRUE, col='darkgreen', pch=20, cex=cex)
plot(nb2, add=TRUE, col='darkgreen', pch=20, cex=cex)
}
nb_plotter(rook[[1]], rook[[29]], c(1,29))
traceback()
# Setup for the next few slides
n <- 6
box <- st_polygon(list(matrix(c(0,0,0,n,n,n,n,0,0,0), byrow=TRUE, ncol=2)))
box_cells <- st_make_grid(box, cellsize=1, what='centers')
box_cells_sp <- as(box_cells, 'Spatial')
# Rook and Queen
rook <- cell2nb(n,n)
queen <- cell2nb(n,n, 'queen')
knn <- knearneigh(box_cells_sp, k=8)
dnn <- dnearneigh(box_cells_sp, 0, 2.4)
nb_plotter <- function(nb1_idx, nb2_idx, pts=c(1,19), cex=3){
plot(box_cells, type='n')
# Draw lines connecting points 1 and 2 to neighbours
nb1 <-  box_cells[nb1_idx]
nb2 <-  box_cells[nb2_idx]
pt1 <- box_cells[pts[1]]
pt2 <- box_cells[pts[2]]
for(row in nb1){
lines(rbind(st_coordinates(pt1), st_coordinates(row)))
}
for(row in nb2){
lines(rbind(st_coordinates(pt2), st_coordinates(row)))
}
plot(box_cells, add=TRUE, cex=cex, lwd=3)
plot(box_cells[pts,], add=TRUE, col='red', pch=20, cex=cex)
plot(nb1, add=TRUE, col='darkgreen', pch=20, cex=cex)
plot(nb2, add=TRUE, col='darkgreen', pch=20, cex=cex)
}
nb_plotter(rook[[1]], rook[[29]], c(1,29))
traceback()
# Setup for the next few slides
n <- 6
box <- st_polygon(list(matrix(c(0,0,0,n,n,n,n,0,0,0), byrow=TRUE, ncol=2)))
box_cells <- st_make_grid(box, cellsize=1, what='centers')
box_cells_sp <- as(box_cells, 'Spatial')
# Rook and Queen
rook <- cell2nb(n,n)
queen <- cell2nb(n,n, 'queen')
knn <- knearneigh(box_cells_sp, k=8)
dnn <- dnearneigh(box_cells_sp, 0, 2.4)
nb_plotter <- function(nb1_idx, nb2_idx, pts=c(1,19), cex=3){
plot(box_cells, type='n')
# Draw lines connecting points 1 and 2 to neighbours
nb1 <-  box_cells[nb1_idx]
nb2 <-  box_cells[nb2_idx]
pt1 <- box_cells[pts[1]]
pt2 <- box_cells[pts[2]]
for(row in nb1){
lines(rbind(st_coordinates(pt1), st_coordinates(row)))
}
for(row in nb2){
lines(rbind(st_coordinates(pt2), st_coordinates(row)))
}
plot(box_cells, add=TRUE, cex=cex, lwd=3)
plot(box_cells[pts], add=TRUE, col='red', pch=20, cex=cex)
plot(nb1, add=TRUE, col='darkgreen', pch=20, cex=cex)
plot(nb2, add=TRUE, col='darkgreen', pch=20, cex=cex)
}
nb_plotter(rook[[1]], rook[[29]], c(1,29))
